 /******************************************************
 * PLEASE DO NOT EDIT THIS FILE
 * the verification process may break
 * ***************************************************/

'use strict';

var fs = require('fs');
var express = require('express');
var path = require('path');
var MongoClient = require('mongodb').MongoClient
var mongoose = require('mongoose');
var multer = require('multer');
const storage = require('multer-gridfs-storage') ({
  url: process.env.MONGOLAB_URI,
  file: (req, file) => {
    console.log(file);
    return {
      filename: 'file_' + Date.now() + path.extname(file.originalname)
    };
  }
});
const upload = multer({ storage: storage });
const app = express();

mongoose.connect(process.env.MONGOLAB_URI, {
  useMongoClient: true
});
// Get the default connection
var db = mongoose.connection;
// Bind connection to error event (to get notification of connection errors)
db.on('error', console.error.bind(console, 'MongoDB connection error:'));


var Schema = mongoose.Schema;
// Create schema
var MySchema = mongoose.Schema({
    name: String,
    size: Number,
    date: Date,
    file: String
});
// Turn the schema into a model
var photo = mongoose.model('photo', MySchema);

// Upload and save photo 
app.post('/upload', upload.single('userFile'), function (req, res, next) {

  var fileDetails = {
    name: req.file.originalname,
    size: req.file.size,
    date: Date.now(),
    file: req.file.filename
  }
  
  var file = new photo(fileDetails);
  
  file.save(function(err, file) {
    if (err) {
      err
    }
    console.log('File saved');
  })

  res.send(fileDetails);
  
})










//
//
// Template from FCC
if (!process.env.DISABLE_XORIGIN) {
  app.use(function(req, res, next) {
    var allowedOrigins = ['https://narrow-plane.gomix.me', 'https://www.freecodecamp.com'];
    var origin = req.headers.origin || '*';
    if(!process.env.XORIG_RESTRICT || allowedOrigins.indexOf(origin) > -1){
         console.log(origin);
         res.setHeader('Access-Control-Allow-Origin', origin);
         res.header("Access-Control-Allow-Headers", "Origin, X-Requested-With, Content-Type, Accept");
    }
    next();
  });
}

app.use('/public', express.static(process.cwd() + '/public'));

app.route('/_api/package.json')
  .get(function(req, res, next) {
    console.log('requested');
    fs.readFile(__dirname + '/package.json', function(err, data) {
      if(err) return next(err);
      res.type('txt').send(data.toString());
    });
  });
  
app.route('/')
    .get(function(req, res) {
		  res.sendFile(process.cwd() + '/views/index.html');
    })

// Respond not found to all the wrong routes
app.use(function(req, res, next){
  res.status(404);
  res.type('txt').send('Not found');
});

// Error Middleware
app.use(function(err, req, res, next) {
  if(err) {
    res.status(err.status || 500)
      .type('txt')
      .send(err.message || 'SERVER ERROR');
  }  
})

app.listen(process.env.PORT, function () {
  console.log('Node.js listening ...');
});

